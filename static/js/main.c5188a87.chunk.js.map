{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","elipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PCqExC,SAASC,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OAIIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,UAAU,kBAS9C,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,GAQzBC,MAzDf,SAAAC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOZ,EAA2BW,EAA3BX,OAAQa,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKW,KAEtCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACVO,EAAOE,IAAK,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAElEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,QAAQ,MACRC,WAAS,EACTC,QAAQ,gBC2BjBC,6MA3DbC,MAAQ,KAKRC,cAAgB,WAYd,OAXeC,EAAKF,MAAMG,OAAOb,IAAK,SAACc,GAGrC,OAFAC,QAAQC,IAAIF,GAEL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACGpB,MAAOiB,EAAMI,cACbjC,OAAQ6B,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAM9BsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEUf,EAAKgB,WAFf,OAELf,EAFKY,EAAAI,KAIXjB,EAAKkB,SAAS,CACZjB,WALS,wBAAAY,EAAAM,SAAAT,EAAAU,WASbJ,SAAW,WACT,OAAOK,MAAM,iEAEZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SAGtBF,KAAK,SAAAE,GAAI,OAMRA,EAAKC,KANG,SASTC,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,0FAnD1BxB,QAAQC,IAAI,0DAIZgB,KAAKX,8CAoDE,IACCR,EAAWmB,KAAKtB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKE,UAAWsB,EAAS,MAAQ,gBAC9BmB,KAAKtB,MAAMG,OAASmB,KAAKrB,gBAAkB,kBAnElC6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.c5188a87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n//class Movie extends Component {\r\n//    \r\n//    static propTypes = {\r\n//        title: PropTypes.string.isRequired,\r\n//        poster: PropTypes.string.isRequired\r\n//    }\r\n//    \r\n//    render() {\r\n//        return (\r\n//            <div>\r\n//                <MoviePoster poster={this.props.poster} />\r\n//                <h1>{this.props.title}</h1>\r\n//            </div>\r\n//        );\r\n//    }\r\n// }\r\n\r\n//class MoviePoster extends Component {\r\n//\r\n//    static propTypes = {\r\n//        poster: PropTypes.string.isRequired\r\n//    }\r\n//\r\n//    render(){\r\n//        \r\n//        return (\r\n//            <img src={this.props.poster} />\r\n//        );\r\n//    }\r\n//}\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map( (genre, index) => <MovieGenre genre={genre} key={index}/> ) }\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis \r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        elipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n    , poster: PropTypes.string.isRequired\r\n    , title: PropTypes.string.isRequired\r\n    , genres: PropTypes.array.isRequired\r\n    , synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        // functional component는 클래스가 아니기 때문에 this.props를 지우고 poster만 남김\r\n        // class coponent는 this라는 키워드가 있음.\r\n        // 오직 return 만 가짐.\r\n        <img src={poster} alt={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n    , alt: PropTypes.string.isRequired\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\nclass App extends Component {\n\n  //componentWillReceiveProps() => old props와 new props를 비교하여 다르면 shouldComponentUpdate() == true라고 생각, 즉 update를 해야한다고 생각 => componentWillUpdate() => render => componentDidUpdate()\n\n  //component가 바뀔때마다(state가 바뀔때마다) render가 일어남.\n\n  componentWillMount(){\n    console.log(\"will mount\");\n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  state = {\n  \n  }\n\n  // _를 이용하여 function을 표시한 이유는 리액트 자체 함수와 구분을 하기 위함.\n  _renderMovies = () => {\n    const movies = this.state.movies.map( (movie) => {\n      console.log(movie);\n      // component의 key는 index를 사용하지 않는 것이 좋음 ... 느리기 때문\n      return <Movie \n                title={movie.title_english} \n                poster={movie.medium_cover_image} \n                key={movie.id} \n                genres={movie.genres}\n                synopsis={movie.synopsis}\n              />\n    })\n    return movies;\n  }\n\n  _getMovies = async ()  => {\n    // await는 await 뒤의 function이 끝나기를 기다리는 것(성공적으로 수행이 아님)\n    const movies = await this._callApi();\n\n    this.setState({\n      movies \n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    // response의 readableStream은 byte로 이루어져있다는 뜻 이것을 json으로 바꿔야함.\n    .then(potato => potato.json())\n    // call back 지옥이란 then이 많아져서 길을 잃어버리는 것\n    // 이런 이유로 async await를 쓸 것임.\n    .then(json => \n      //{\n      //  this.setState({\n      //    movies: json.data.movies\n      //  })\n      //}\n      json.data.movies\n      \n    )\n    .catch(err => console.log(err))\n    // promise를 사용하는 이유: 동시에 여러가지 작업을 수행할 때{만약 순차적으로 작업을 한다면 한 작업이 끝날때까지 다음 작업이 대기하여야 함. 유저 입장에서는 좋지 못함.} 스케쥴링시 좋음.\n    // 시나리오 잡는 데 도움을 줌.\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? 'App' : \"App--loading\"} >\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}